% 0. A -> B: A, Na, Sid, Pa		nounceA, sessionID, preferences for encryption
% 1. B -> A: Nb, Sid, Pb		nounceB, sessionID, preferences for encryption
% 2. B -> A: {B, Kb}inv(Ks)		optional server certificate
% 3. A -> B: {A, Ka}inv(Ks)		optional client certificate
% 4. A -> B: {PMS}Kb			where PMS is a nonce generated by A
% 5. A -> B: {H(Nb,B,PMS)}inv(Ka)	optional certificate verify message
% 6. A -> B: {Finished}Keygen(A, Na, Nb, M) Finished = H(M.A.B.Na.Nb.Pa.Sid)
% 7. B -> A: {Finished}Keygen(B, Na, Nb, M)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role alice(
	A, B : agent,  
        H, % for messsage verfication
	PRF, % pseudorandom number function to calc the master-secret
	KeyGen: hash_func, % generates the symmetric keys
        Ka, Ks: public_key, % Ks is the public key of the certificate authority
        SND, RCV: channel (dy))
played_by A def=

   local 
	State: nat,
	Na, Sid, Pa, PMS: text, % nounceA, sessionID, preferences for encryption, premaster-secret
        Nb: text, % nounceB
        Finished: hash(hash(text.text.text).agent.agent.text.text.text), % H(PRF(PMS.Na.Nb).A.B.(Na|Nb).(Pa|Pb).Sid)
        ClientK, ServerK: hash(agent.text.text.hash(text.text.text)), % Keygen(A.Na.Nb.PRF(PMS.Na.NB))
        Kb: public_key,
        M: hash(text.text.text)

   init  
	State := 0

   transition

   0.  State = 0   /\ RCV(start) =|>
       State' := 2 /\ Na' := new()
		   /\ Sid' := new()
       		   /\ Pa' := new()
       		   /\ SND(A.Na'.Sid'.Pa') % 0. A -> B: A, Na, Sid, Pa

   2.  State = 2   /\ RCV(Nb'.Sid.Pa.{B.Kb'}_(inv(Ks))) =|> % 1. B -> A: Nb, Sid, Pb AND 2. B -> A: {B, Kb}inv(Ks)
       State' := 4 /\ PMS' := new()
       		   /\ M' := PRF(PMS'.Na.Nb')
       		   /\ Finished' := H(M'.A.B.Na.Pa.Sid)
       		   /\ ClientK' := KeyGen(A.Na.Nb'.M')
       		   /\ ServerK' := KeyGen(B.Na.Nb'.M')
       		   /\ SND({A.Ka}_(inv(Ks)). % 3. A -> B: {A, Ka}inv(Ks)
              		{PMS'}_Kb'. % 4. A -> B: {PMS}Kb
              		{H(Nb'.B.PMS')}_(inv(Ka)). %5. A -> B: {H(Nb,B,PMS)}inv(Ka)
              		{Finished'}_ClientK') % 6. A -> B: {Finished}Keygen(A, Na, Nb, M) 
       		   /\ witness(A,B,bob_alice_na_nb,Na.Nb')

   4.  State = 4   /\ RCV({Finished}_ServerK) =|> % 7. B -> A: {Finished}Keygen(B, Na, Nb, M)
       State' := 6 /\ request(A,B,alice_bob_na_nb,Na.Nb)
       		   /\ secret(ClientK,secrecyClientK,{A,B})
       		   /\ secret(ServerK,secrecyServerK,{A,B})

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role bob(
	A, B : agent,
        H, PRF, KeyGen: hash_func,
        Kb, Ks: public_key,
        SND, RCV: channel (dy))
played_by B def=

   local 
	Na, Nb, Sid, Pa, PMS: text,
	State: nat,
        Ka: public_key

   init  
	State := 1

   transition

   1.  State = 1   /\ RCV(A.Na'.Sid'.Pa') =|> % 0. A -> B: A, Na, Sid, Pa
       State' := 3 /\ Nb' := new()
       		   /\ SND(Nb'.Sid'.Pa'.{B.Kb}_(inv(Ks))) % 1. B -> A: Nb, Sid, Pb AND 2. B -> A: {B, Kb}inv(Ks)
       		   /\ witness(B,A,alice_bob_na_nb,Na'.Nb')

   3.  State = 3   /\ RCV({A.Ka'}_(inv(Ks)). % 3. A -> B: {A, Ka}inv(Ks)
			{PMS'}_Kb. % 4. A -> B: {PMS}Kb
              		{H(Nb.B.PMS')}_(inv(Ka')). %5. A -> B: {H(Nb,B,PMS)}inv(Ka)
              		{H(PRF(PMS'.Na.Nb).A.B.Na.Pa.Sid) % 6. A -> B: {Finished
              		}_KeyGen(A.Na.Nb.PRF(PMS'.Na.Nb))) =|> % }Keygen(A, Na, Nb, M) 
       State' := 5 /\ SND({H(PRF(PMS'.Na.Nb).A.B.Na.Pa.Sid) % 7. B -> A: {Finished
              		}_KeyGen(B.Na.Nb.PRF(PMS'.Na.Nb))) % }Keygen(B, Na, Nb, M)
       		   /\ request(B,A,bob_alice_na_nb,Na.Nb)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(
	A,B: agent,
        Ka, Kb, Ks: public_key,
        H, PRF, KeyGen: hash_func)
def=

   local  SA, SB, RA, RB: channel (dy)

   composition
        alice(A,B,H,PRF,KeyGen,Ka,Ks,SA,RA)
   /\   bob(A,B,H,PRF,KeyGen,Kb,Ks,SB,RB)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment()
def=

   const 
	secrecyClientK, 
	secrecyServerK,
	bob_alice_na_nb, 
	alice_bob_na_nb : protocol_id,
        ka, kb, ki, ks  : public_key,
	a, b            : agent,
        h, prf, keygen  : hash_func

   intruder_knowledge = { a, b, ka, kb, ks, ki, inv(ki), {i.ki}_(inv(ks)), h, prf, keygen }  

   composition
        session(a,b,ka,kb,ks,h,prf,keygen)
    /\  session(a,i,ka,ki,ks,h,prf,keygen)
    /\  session(i,b,ki,kb,ks,h,prf,keygen)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

  secrecy_of secrecyClientK,secrecyServerK
  authentication_on alice_bob_na_nb
  authentication_on bob_alice_na_nb

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()

